{
  "hash": "d95f825c2c1c66c186ad24c5e64ac93f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vendée Globe 2024\"\nsubtitle: \"Mapping the skippers\"\nauthor: \"Jonathan Kitt\"\ndate: \"2024-11-20\"\nimage: 20241120_060000.png\ntoc: true\ncategories: [R, Vendée Globe, Map]\n---\n\n\n\n# Introduction\n\nThe [Vendée Globe 2024](https://www.vendeeglobe.org/) is well under way!\n\n<br>\n\nI wanted to see if I could try a map of the skippers with R.\n\nFollow this tutorial if you'd like to try it for yourself!\n\n<br>\n\n# Getting the data\n\n<br>\n\nThe skipper's standings and coordinates (among other data) are updated every four hours on the race's website.\n\nYou can download the datasets [here](https://www.vendeeglobe.org/classement).\n\nI cleaned the different datasets and created a \"global\" dataset, which can be [downloaded here](https://github.com/KittJonathan/VENDEE_GLOBE/blob/main/03-DATA_PROCESSED/clean_data.csv).\n\n<br>\n\nWe start our script by loading the packages we'll be using:\n\n-   [{tidyverse}](https://www.tidyverse.org/) to clean the data and create the plots\n\n-   [{readxl}](https://readxl.tidyverse.org/) to import the Excel sheets containing the data\n\n-   [{showtext}](https://github.com/yixuan/showtext) to change the fonts used\n\n-   [{parzer}](https://docs.ropensci.org/parzer/) to convert coordinates\n\nIf you don't have these packages installed, simply use the `install.packages()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(showtext)\nlibrary(parzer)\n```\n:::\n\n\n\n<br>\n\nWe also load the fonts we will use in the plots: **Roboto Condensed**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the fonts\nfont_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\nshowtext_auto()\n```\n:::\n\n\n\n<br>\n\nWe can now import the clean dataset :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the dataset\ndf <- readr::read_csv(\"clean_data.csv\")\n```\n:::\n\n\n\n<br>\n\nFor a quick overview of the data, we use the `glimpse()` function from the [{dplyr}](https://dplyr.tidyverse.org/) package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the dataset\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,160\nColumns: 24\n$ Date                        <dbl> 20241110, 20241110, 20241110, 20241110, 20…\n$ Time                        <chr> \"130400\", \"130400\", \"130400\", \"130400\", \"1…\n$ Rank                        <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ Nat                         <chr> \"FRA\", \"GBR\", \"FRA\", \"FRA\", \"FRA\", \"FRA\", …\n$ Sail                        <chr> \"FRA 2030\", \"FRA 100\", \"FRA 172\", \"FRA 56\"…\n$ Surname                     <chr> \"Meilhat\", \"Goodchild\", \"Duc\", \"Amedeo\", \"…\n$ Name                        <chr> \"Paul\", \"Sam\", \"Louis\", \"Fabrice\", \"Maxime…\n$ Hour_FR                     <chr> \"14:02 FR\\r\\n\", \"14:02 FR\\r\\n\", \"14:02 FR\\…\n$ Latitude                    <chr> \"46°25.94'N\", \"46°26.02'N\", \"46°26.01'N\", …\n$ Longitude                   <chr> \"01°50.17'W\", \"01°50.14'W\", \"01°50.01'W\", …\n$ Last30min_heading           <chr> \"297°\", \"270°\", \"291°\", \"277°\", \"240°\", \"2…\n$ Last30min_speed             <chr> \"0.9 kts\", \"0.8 kts\", \"0.6 kts\", \"0.6 kts\"…\n$ Last30min_VMG               <chr> \"0.5 kts\", \"0.7 kts\", \"0.4 kts\", \"0.5 kts\"…\n$ Last30min_distance          <chr> \"0.0 nm\", \"0.0 nm\", \"0.0 nm\", \"0.0 nm\", \"0…\n$ SinceLastStandings_heading  <chr> \"297°\", \"270°\", \"291°\", \"280°\", \"240°\", \"2…\n$ SinceLastStandings_speed    <chr> \"0.9 kts\", \"0.8 kts\", \"0.6 kts\", \"0.7 kts\"…\n$ SinceLastStandings_VMG      <chr> \"0.5 kts\", \"0.7 kts\", \"0.4 kts\", \"0.5 kts\"…\n$ SinceLastStandings_distance <chr> \"0.0 nm\", \"0.0 nm\", \"0.0 nm\", \"0.1 nm\", \"0…\n$ Last24hrs_heading           <chr> \"205°\", \"205°\", \"204°\", \"204°\", \"204°\", \"2…\n$ Last24hrs_speed             <chr> \"0.2 kts\", \"0.2 kts\", \"0.2 kts\", \"0.2 kts\"…\n$ Last24hrs_VMG               <chr> \"0.2 kts\", \"0.2 kts\", \"0.2 kts\", \"0.1 kts\"…\n$ Last24hrs_distance          <chr> \"4.6 nm\", \"4.6 nm\", \"4.5 nm\", \"4.5 nm\", \"4…\n$ Distance_to_finish          <chr> \"24272.3 nm\", \"24272.4 nm\", \"24272.5 nm\", …\n$ Distance_to_leader          <chr> \"0.0 nm\", \"0.1 nm\", \"0.1 nm\", \"0.2 nm\", \"0…\n```\n\n\n:::\n:::\n\n\n\n<br>\n\n# Cleaning the data\n\n<br>\n\nWe use the following code to parse the coordinates:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> \n  mutate(lon = parzer::parse_lon(Longitude),\n         lat = parzer::parse_lat(Latitude))\n```\n:::\n\n\n\n<br>\n\n# Creating the map\n\n<br>\n\n## World map\n\n<br>\n\nFirst we get the data for the world map:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\n```\n:::\n\n\n\n<br>\n\n## Skippers\n\n<br>\n\nWe then create a simple map with the latest standings:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group),\n               fill = \"#afcfdf\") +\n  geom_point(data = filter(df, Date == 20241120, Time == \"060000\"),\n             aes(x = lon, y = lat),\n             col = \"white\", size = 0.8) +\n  coord_fixed(ratio = 1.3, xlim = c(-35, 0), ylim = c(5, 30)) +\n  labs(title = \"Vendée Globe 2024\",\n       subtitle = \"2024-11-20 6:00\") +\n  theme_void() +\n  theme(panel.background = element_rect(colour = \"#485fb0\",\n                                        fill = \"#485fb0\"),\n        plot.background = element_rect(colour = \"#485fb0\",\n                                        fill = \"#485fb0\"),\n        # plot.margin = margin(t = -50, r = -150),\n        plot.title = element_text(colour = \"white\",\n                                  family = \"Roboto Condensed\",\n                                  size = 20, hjust = 0.5),\n        plot.subtitle = element_text(colour = \"white\",\n                                     family = \"Roboto Condensed\",\n                                     size = 15, hjust = 0.5))\n```\n:::\n\n\n\n<br>\n\n## Save map\n\n<br>\n\nWe now save the map :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"20241120_060000.png\", p, dpi = 320, width = 6, height = 6)\n```\n:::\n\n\n\n<br>\n\nAnd here's the result:\n\n![](20241120_060000.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}