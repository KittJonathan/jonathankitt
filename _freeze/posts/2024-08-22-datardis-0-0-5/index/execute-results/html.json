{
  "hash": "3986c7cbc4ee6900ae2e02890ce597d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{datardis} package v.0.0.5\"\nsubtitle: \"Explore the latest Dr Who episodes\"\nauthor: \"Jonathan Kitt\"\ndate: \"2024-08-22\"\nimage: img/datardis_hex.png\ntoc: true\ncategories: [R, Package, Dr Who]\n---\n\n\n# Introduction\n\n<br>\n\nThe [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) weekly challenge is organised by the R4DS (R for Data Science) Online Learning Community.\n\nEvery tuesday throughout the year, participants work on a common dataset and share the plots they create.\n\nThe [dataset](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-09-12) for this challenge comes from the [Human Chronome Project](https://www.humanchronome.org/).\n\n<br>\n\n# Getting the data\n\n<br>\n\nFirst of all, let's load the packages we'll be using :\n\n-   [{tidyverse}](https://www.tidyverse.org/) to clean the data and create the plots\n\n-   [{showtext}](https://github.com/yixuan/showtext) to change the fonts used\n\n-   [{](https://wilkelab.org/ggtext/)[patchwork](https://patchwork.data-imaginist.com/)[}](https://wilkelab.org/ggtext/) to assemble the plots\n\nIf you don't have these packages installed, simply use the `install.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# üì¶ Load packages ----\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\n```\n:::\n\n\n<br>\n\nWe also load the fonts we will use in the plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# üî§ Import fonts ----\n\nfont_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\nshowtext_auto()\n```\n:::\n\n\n<br>\n\nWe can now download the dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ‚¨áÔ∏è Import the dataset ----\nall_countries <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-09-12/all_countries.csv\")\nglobal_human_day <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-09-12/global_human_day.csv\")\n```\n:::\n\n\n<br>\n\n# Cleaning the data\n\n<br>\n\nWe use the following code to clean the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# üßπ  Clean the data ----\n\ncategories <- all_countries |>\n  # extract unique values\n  distinct(Category, Subcategory)\n\nd <- global_human_day |>\n  # join the categories\n  left_join(categories) |>\n  # select columns\n  select(Category, hoursPerDay) |>\n  # add hours per category\n  summarise(total = sum(hoursPerDay), .by = Category) |>\n  # arrange by decreasing amount of time\n  arrange(-total) |>\n  # split the total column into two values\n  separate(col = total, into = c(\"h\", \"m\"), remove = F) |>\n  # transform the trailing hours value into minutes\n  mutate(m = round(as.numeric(paste0(\"0.\", m)) * 60),\n         h = as.numeric(h)) |>\n  # create labels for plots\n  mutate(duration = case_when(h == 0 ~ paste0(m, \"m\"),\n                              TRUE ~ paste0(h, \"h \", m, \"m\"))) |>\n  # select columns\n  select(Category, total, duration)\n```\n:::\n\n\n<br>\n\n# Creating the plot\n\n<br>\n\nFirst we create a custom function to generate one plot per category :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hm <- function(data, row) {\n  ggplot() +\n    geom_rect(aes(xmin = 3, xmax = 4,\n                  ymin = 0, ymax = 24),\n              colour = \"#7e38b7\", fill = \"#7e38b7\") +\n    geom_rect(data = slice(data, row),\n              aes(xmin = 3, xmax = 4,\n                  ymin = 0, ymax = total),\n              colour = \"#9c89ff\", fill = \"#9c89ff\") +\n    coord_polar(theta = \"y\") +\n    xlim(c(0.05, 4)) +\n    labs(title = d$Category[row]) +\n    annotate(\"text\", x = 0.05, y = 0,\n             label = d$duration[row],\n             family = \"Roboto Condensed\",\n             colour = \"#c4feff\",\n             size = 25) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = \"#541675\",\n                                          colour = NA),\n          plot.background = element_rect(fill = \"#541675\",\n                                         colour = NA),\n          plot.title = element_text(family = \"Roboto Condensed\",\n                                    colour = \"#c4feff\", size = 40,\n                                    hjust = 0.5,\n                                    margin = margin(b = -10)))\n}\n```\n:::\n\n\n<br>\n\nWe use the following code to create and assemble the plots and export the final figure :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the plots\np1 <- plot_hm(d, 1)\np2 <- plot_hm(d, 2)\np3 <- plot_hm(d, 3)\np4 <- plot_hm(d, 4)\np5 <- plot_hm(d, 5)\np6 <- plot_hm(d, 6)\np7 <- plot_hm(d, 7)\np8 <- plot_hm(d, 8)\n\n# Assemble the plots\np <- (p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8) +\n  plot_layout(ncol = 4) +\n  plot_annotation(title = \"How humans spend their day time\",\n                  caption = \"#TidyTuesday 2023 week 37 | Data from the Human Chronome Project | Jonathan Kitt\",\n                  theme = theme(panel.background = element_rect(fill = \"#541675\", colour = NA),\n                                plot.background = element_rect(fill = \"#541675\", colour = NA),\n                                plot.title = element_text(family = \"Roboto Condensed\",\n                                                            colour = \"#c4feff\", size = 100,\n                                                            hjust = 0.5, margin = margin(t = 5, b = 25)),\n                                plot.caption = element_text(family = \"Roboto Condensed\",\n                                                            colour = \"white\", size = 30, hjust = 0.5)))\n\n# Export the plot\nggsave(\"figs/tt_2023_w37_global_human_day.png\", p, dpi = 320, width = 12, height = 6)\n```\n:::\n\n\n<br>\n\nWe now create the second plot:\n\n<br>\n\nAnd here's the result!\n\n![](img/tt_2023_w37_global_human_day.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}