{
  "hash": "09e47d3ccc548760588b403599a29d00",
  "result": {
    "markdown": "---\ntitle: \"#TidyTuesday 2023 - Week 32\"\nsubtitle: \"Hot Ones\"\nauthor: \"Jonathan Kitt\"\ndate: \"2023-08-10\"\nimage: img/tt_2023_w32_hot_ones.png\ntoc: true\ncategories: [R, TidyTuesday, datavis, Hot Ones]\n---\n\n\n# Introduction\n\n<br>\n\nThe [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) weekly challenge is organised by the R4DS (R for Data Science) Online Learning Community.\n\nEvery tuesday throughout the year, participants work on a common dataset and share the plots they create.\n\nThe [dataset](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-08-08) for this challenge comes from Wikipedia articles.\n\n<br>\n\n# Getting the data\n\n<br>\n\nFirst of all, let's load the packages we'll be using :\n\n-   [{tidyverse}](https://www.tidyverse.org/) to clean the data and create the plots\n\n-   [{showtext}](https://github.com/yixuan/showtext) to change the fonts used\n\n-   [{](https://wilkelab.org/ggtext/)[patchwork](https://patchwork.data-imaginist.com/)[}](https://wilkelab.org/ggtext/) to combine the plots\n\nIf you don't have these packages installed, simply use the `install.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\n```\n:::\n\n\n<br>\n\nWe also load the fonts we will use in the plots: [**Bebas Neue**](https://fonts.google.com/specimen/Bebas+Neue?query=bebas+) for the text and [**Londrina Shadow**](https://fonts.google.com/specimen/Londrina+Shadow?query=londrina+sha) for the title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the fonts\nfont_add_google(\"Bebas Neue\", \"Bebas Neue\")\nfont_add_google(\"Londrina Shadow\", \"Londrina Shadow\")\nshowtext_auto()\n```\n:::\n\n\n<br>\n\nWe can now download the dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the dataset\nsauces <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-08/sauces.csv')\n```\n:::\n\n\n<br>\n\nThe dataset has **210 observations** (rows) and **4 variables** (columns).\n\nEach row represents one **sauce** used in the show.\n\nThe 4 variables are:\n\n-   The **season number** (1 to 21)\n\n-   The **sauce number** (1 to 10, ordered from the least hot to the hottest)\n\n-   The **sauce name**\n\n-   The **Scoville score** (sauce rating in Scoville heat units)\n\n<br>\n\n# Cleaning the data\n\n<br>\n\nWe use the following code to clean the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data cleaning and prep - Sauces per season ----\n\n# Scoville scale\nscoville_scale <- tibble(\n  evaluation = c(\"01-Neutral\", \"02-Sweet\", \"03-Warm\", \"04-Spicy\",\n                 \"05-Hot\", \"06-Strong\", \"07-Raging\", \"08-Burning\",\n                 \"09-Torrid\", \"10-Volcanic\", \"11-Explosive\"))\n\n# Count number of sauces for each Scoville scale range per season\nsauces_count <- sauces |>\n  # Create categories for scoville scores\n  mutate(evaluation = case_when(scoville < 100 ~ \"01-Neutral\",\n                                between(scoville, 100, 499) ~ \"02-Sweet\",\n                                between(scoville, 500, 999) ~ \"03-Warm\",\n                                between(scoville, 1000, 1499) ~ \"04-Spicy\",\n                                between(scoville, 1500, 2499) ~ \"05-Hot\",\n                                between(scoville, 2500, 4999) ~ \"06-Strong\",\n                                between(scoville, 5000, 14999) ~ \"07-Raging\",\n                                between(scoville, 15000, 29999) ~ \"08-Burning\",\n                                between(scoville, 30000, 49999) ~ \"09-Torrid\",\n                                between(scoville, 50000, 99999) ~ \"10-Volcanic\",\n                                scoville >= 100000 ~ \"11-Explosive\")) |>\n  # Count number of occurences per season and evaluation\n  count(season, evaluation) |>\n  # Add full Scoville scale\n  right_join(scoville_scale) |>\n  # Add non-existing scoville categories and fill empty cells with 0\n  complete(season, evaluation, fill = list(n = 0)) |>\n  # Remove NAs\n  filter(!is.na(season))\n\n# p1 - Background\np1_bg <- scoville_scale |>\n  # Coordinates for rectangles\n  mutate(x1 = 0, x2 = 4, x3 = 46,\n         y1 = seq(0, 20, 2), y2 = seq(2, 22, 2)) |>\n  # Split evaluation column into grade + evaluation\n  separate(evaluation, into = c(\"grade\", \"evaluation\"))\n\n# p1 - Grid\np1_grid <- tibble(x0 = seq(4, 46, 2),\n                  x1 = x0,\n                  y0 = 0,\n                  y1 = 22)\n\n# p1 - Sauce count\np1_count <- sauces_count |>\n  # Split evaluation column into grade + evaluation\n  separate(evaluation, into = c(\"grade\", \"evaluation\")) |>\n  # Add coordinates\n  mutate(y = rep(seq(1, 21, 2), times = 21)) |>\n  # Order by grade and season\n  arrange(grade, season) |>\n  # Add coordinates\n  mutate(x = rep(seq(5, 45, 2), times = 11)) |>\n  # Remove empty rows\n  filter(n != 0)\n\n# p1 - Axis y text\np1_y_labels <- tibble(x = -0.5,\n                      y = seq(2, 20, 2),\n                      score = c(\"100\", \"500\", \"1,000\", \"1,500\", \"2,500\", \"5,000\",\n                                \"15,000\", \"30,000\", \"50,000\", \"100,000\"))\n\n# Data cleaning and prep - Total score per season ----\n\n# p2 - scores\np2_scores <- sauces |>\n  # Calculate cumulative Scoville score for all 10 sauces per season\n  summarise(total = sum(scoville), .by = season) |>\n  # Add coordinates + round to thousands of units\n  mutate(x = seq(5, 45, 2),\n         total_thsd = plyr::round_any(total, 1000) / 1000)\n\n# p2 - x axis labels\np2_x_labels <- tibble(x = c(2, seq(5, 45, 2)),\n                      y = 3800,\n                      label = c(\"Season #\", 1:21))\n\n# p2 - text\np2_text <- tibble(x = -0.95,\n                  y = c(2600, 2200, 1800, 1400),\n                  label = c(\"Overall Scoville\",\n                            \"heat score for all\",\n                            \"10 sauces (in 1,000s\",\n                            \"of units)\"))\n```\n:::\n\n\n<br>\n\n# Creating the plot\n\n<br>\n\nFirst we create a vector with custom colours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_cols <- c(\"Neutral\" = \"#86ff00\",\n                 \"Sweet\" = \"#bcff00\",\n                 \"Warm\" = \"#ddfa00\",\n                 \"Spicy\" = \"#edeb00\",\n                 \"Hot\" = \"#eecb00\",\n                 \"Strong\" = \"#ffbf03\",\n                 \"Raging\" = \"#ff9000\",\n                 \"Burning\" = \"#ff6100\",\n                 \"Torrid\" = \"#fe3000\",\n                 \"Volcanic\" = \"#ee0000\",\n                 \"Explosive\" = \"#790200\")\n```\n:::\n\n\n<br>\n\nWe then create the first plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot - p1 ----\n\np1 <- ggplot() +\n  geom_rect(data = p1_bg,\n            aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2,\n                fill = evaluation),\n            show.legend = FALSE) +\n  geom_rect(data = p1_bg,\n            aes(xmin = x2, xmax = x3, ymin = y1, ymax = y2,\n                fill = evaluation),\n            alpha = 0.5, show.legend = FALSE) +\n  geom_segment(data = p1_grid,\n               aes(x = x0, xend = x1, y = y0, yend = y1)) +\n  geom_text(data = p1_bg,\n            aes(x = 2, y = y1 + 1, label = evaluation),\n            colour = \"black\", family = \"Bebas Neue\", size = 14) +\n  geom_text(data = p1_count,\n            aes(x = x, y = y, label = n),\n            colour = \"white\", family = \"Bebas Neue\", size = 14) +\n  geom_text(data = p1_y_labels,\n            aes(x = x, y = y, label = score),\n            size = 12, hjust = 1, colour = \"white\") +\n  geom_text(aes(x = 2, y = 23.5, label = \"Scoville scale\"),\n            family = \"Bebas Neue\", size = 16, hjust = 0.5, colour = \"white\") +\n  scale_fill_manual(values = custom_cols) +\n  xlim(-1, 46) +\n  labs(title = \"Number of sauces used\") +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"black\"),\n        plot.background = element_rect(fill = \"black\"),\n        plot.title = element_text(family = \"Bebas Neue\", colour = \"white\",\n                                  size = 60, hjust = 0.5, margin = margin(t = 20)))\n```\n:::\n\n\n<br>\n\nWe now create the second plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot - p2 ----\n\np2 <- ggplot() +\n  geom_rect(data = p2_scores,\n             aes(xmin = x - 0.85, xmax = x + 0.85,\n                 ymin = 0, ymax = total_thsd),\n            fill = \"#edeb00\") +\n  geom_text(data = p2_scores,\n            aes(x = x, y = total_thsd - 160, label = total_thsd),\n            family = \"Bebas Neue\", colour = \"black\", size = 18) +\n  geom_text(data = p2_x_labels,\n            aes(x = x, y = y, label = label),\n            family = \"Bebas Neue\", colour = \"white\", size = 18) +\n  geom_text(data = p2_text,\n            aes(x = x, y = y, label = label),\n            family = \"Bebas Neue\", colour = \"white\", size = 20,\n            hjust = 0) +\n  xlim(-1, 46) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"black\"),\n        plot.background = element_rect(fill = \"black\"))\n```\n:::\n\n\n<br>\n\nWe use the {patchwork} package to assemble the plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assemble plots\np <- p1 / p2 +\n  plot_annotation(title = \"Hot Ones\",\n                  caption = \"#TidyTuesday 2023 week 32 | Data from Wikipedia | Jonathan Kitt\",\n                  theme = theme(panel.background = element_rect(fill = \"black\", colour = \"black\"),\n                                plot.background = element_rect(fill = \"black\", colour = \"black\"),\n                                plot.title = element_text(family = \"Londrina Shadow\",\n                                                          size = 125, hjust = 0.5,\n                                                          colour = \"#edeb00\",\n                                                          margin = margin(t = 10)),\n                                plot.caption = element_text(size = 20, colour = \"white\", hjust = 0.5)))\n\n# Export plot\n\nggsave(\"figs/tt_2023_w32_hot_ones.png\", p, dpi = 320, width = 12, height = 6)\n```\n:::\n\n\n<br>\n\nAnd here's the result!\n\n![](img/tt_2023_w32_hot_ones.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}