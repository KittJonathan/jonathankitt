{
  "hash": "5e41314e4277de67966683f369e7adf7",
  "result": {
    "markdown": "---\ntitle: \"#TidyTuesday 2023 - Week 30\"\nsubtitle: \"Scurvy\"\nauthor: \"Jonathan Kitt\"\ndate: \"2023-07-28\"\ndraft: true\ntoc: true\ncategories: [R, TidyTuesday, datavis, scurvy]\n---\n\n\n# Introduction\n\nThe [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) weekly challenge is organised by the R4DS (R for Data Science) Online Learning Community.\n\nEvery tuesday throughout the year, participants work on a common dataset and share the plots they create.\n\nThe [dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-07-25/readme.md) for this challenge comes from the [{medicaldata}](https://higgi13425.github.io/medicaldata/) R package.\n\n# Getting the data\n\nFirst of all, let's load the packages we'll be using :\n\n-   [{tidyverse}](https://www.tidyverse.org/) to clean the data and create the plotstidyver\n\n-   [{patchwork}](https://patchwork.data-imaginist.com/) to assemble the plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages\nlibrary(tidyverse)\nlibrary(patchwork)\n```\n:::\n\n\nWe can now download the dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the dataset\nscurvy <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-07-25/scurvy.csv\")\n```\n:::\n\n\nFor a quick overview of the data, we use the glimpse() function from the {dplyr} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the dataset\nglimpse(scurvy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12\nColumns: 8\n$ study_id                  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n$ treatment                 <chr> \"cider\", \"cider\", \"dilute_sulfuric_acid\", \"d…\n$ dosing_regimen_for_scurvy <chr> \"1 quart per day\", \"1 quart per day\", \"25 dr…\n$ gum_rot_d6                <chr> \"2_moderate\", \"2_moderate\", \"1_mild\", \"2_mod…\n$ skin_sores_d6             <chr> \"2_moderate\", \"1_mild\", \"3_severe\", \"3_sever…\n$ weakness_of_the_knees_d6  <chr> \"2_moderate\", \"2_moderate\", \"3_severe\", \"3_s…\n$ lassitude_d6              <chr> \"2_moderate\", \"3_severe\", \"3_severe\", \"3_sev…\n$ fit_for_duty_d6           <chr> \"0_no\", \"0_no\", \"0_no\", \"0_no\", \"0_no\", \"0_n…\n```\n:::\n:::\n\n\nThe dataset has 12 observations (rows) and 8 variables (columns).\n\nEach row represents a seaman with scurvy.\n\nWe find the following information in the different columns:\n\n-   the treatment and dosage received\n\n-   scores for 4 symptoms (gum rot, skin sores, weakness of the knees, lassitude)\n\n-   was the seaman fit to resume duty or not\n\n# Cleaning and preparing the data\n\n## Cleaning the data\n\nWe use the following code to clean the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscurvy_clean <- scurvy |>\n  # remove dosing regimen column\n  select(-dosing_regimen_for_scurvy) |>\n  # transform from wide to long format\n  pivot_longer(cols = gum_rot_d6:fit_for_duty_d6,\n               names_to = \"item\",\n               values_to = \"value\") |>\n  # separate \"value\" column into \"score\" + \"grade\"\n  separate(col = value,\n           into = c(\"score\", \"grade\"),\n           convert = TRUE) |>\n  # remove \"_d6\" suffix in item column\n  # replace \"_\" with white spaces\n  # transform character strings into sentences\n  mutate(item = str_remove_all(item, \"_d6\"),\n         across(treatment:item,\n                ~str_replace_all(., pattern = \"_\",\n                                 replacement = \" \")),\n         across(c(treatment, item, grade), \n                ~str_to_sentence(.))) |>\n  # transform study_id into factor\n  # arrange factor levels by order of appearance\n  mutate(study_id = fct_inseq(as_factor(study_id)),\n         across(treatment:item, ~fct_inorder(.)))\n\nhead(scurvy_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  study_id treatment item                  score grade   \n  <fct>    <fct>     <fct>                 <int> <chr>   \n1 1        Cider     Gum rot                   2 Moderate\n2 1        Cider     Skin sores                2 Moderate\n3 1        Cider     Weakness of the knees     2 Moderate\n4 1        Cider     Lassitude                 2 Moderate\n5 1        Cider     Fit for duty              0 No      \n6 2        Cider     Gum rot                   2 Moderate\n```\n:::\n:::\n\n\n## Calculating the overall improvement score\n\nWe use the following code to calculate an overall improvement score:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverall_improvement <- scurvy_clean |>\n  # remove \"Fit for duty\" column\n  filter(item != \"Fit for duty\") |>\n  # calculate total score by treatment\n  summarise(total = sum(score),\n            .by = treatment) |>\n  # calculate overall improvement score as %\n  mutate(improvement_score = 100 * (24-total) / 24) |>\n  # remove total column\n  select(-total) |> \n  # arrange data by increasing improvement score\n  arrange(improvement_score)\n\nhead(overall_improvement)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  treatment            improvement_score\n  <fct>                            <dbl>\n1 Vinegar                            0  \n2 Sea water                          0  \n3 Purgative mixture                  0  \n4 Dilute sulfuric acid              12.5\n5 Cider                             33.3\n6 Citrus                            87.5\n```\n:::\n:::\n\n\n# Creating the plots\n\n## Viewing the overall improvement\n\nFIrst, we create data points to draw vertical bars from 0 to 100:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data points to draw bars from 0 to 100\np1_bars <- overall_improvement |>\n  # keep treatment column\n  select(treatment) |>\n  # add a row id column named \"y\"\n  rowid_to_column(var = \"y\") |>\n  # repeat each row 101 times (0 to 100)\n  slice(rep(1:n(), each = 101)) |>\n  # add a column with positions to draw bars\n  mutate(x = rep(0:100, times = 6))\n```\n:::\n\n\nThen we use the same approach to create data points for the overall improvement scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data points to draw bars for improvement scores\np1_values <- overall_improvement |>\n  # round improvement score %\n  mutate(improvement_score = round(improvement_score)) |>\n  # select treatment + improvement score columns\n  select(treatment, improvement_score) |>\n  # join p1_bars to get positions for bars from 0 to score\n  left_join(p1_bars) |>\n  # extract max score for each treatment\n  mutate(max_score = max(improvement_score),\n         .by = treatment) |>\n  # remove rows when x > max_score\n  filter(x <= max_score) |>\n  # order columns\n  select(y, treatment, x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(treatment)`\n```\n:::\n:::\n\n\nLet's create the background bars with all values from 0 to 100 for each one of the 6 treatments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p1_bg <- ggplot() +\n    geom_segment(data = p1_bars,\n                 aes(x = x, xend = x, y = y - 0.25, yend = y + 0.25,\n                     colour = x),\n                 linewidth = 2,\n                 alpha = 0.4,\n                 show.legend = FALSE) +\n    scale_colour_gradient2(low = \"#d62828\",\n                           mid = \"#f77f00\",\n                           high = \"#fcbf49\",\n                           midpoint = 50) +\n    theme_void() +\n    theme(panel.background = element_rect(fill = \"#003049\",\n                                          colour  = \"#003049\"),\n          plot.background = element_rect(fill = \"#003049\",\n                                         colour  = \"#003049\"))\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNow, let(s add the values for the improvement scores to this background plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p1 <- p1_bg +\n    geom_segment(data = p1_values,\n                 aes(x = x, xend = x, y = y - 0.25, yend = y + 0.25,\n                     colour = x),\n                 linewidth = 2,\n                 show.legend = FALSE)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nFinally, we'll add labels to indicate the names of the different treatments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p2 <- p1 +\n    geom_text(data = p1_values |> distinct(y, treatment),\n              aes(x = 0, y = y + 0.4, label = treatment),\n              size = 5, colour = \"white\", hjust = 0)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}