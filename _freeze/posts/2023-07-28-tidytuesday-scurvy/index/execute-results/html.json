{
  "hash": "a2d13d26ea41a09832bfb6fa0586b05e",
  "result": {
    "markdown": "---\ntitle: \"#TidyTuesday 2023 - Week 30\"\nsubtitle: \"Scurvy\"\nauthor: \"Jonathan Kitt\"\ndate: \"2023-07-28\"\nimage: img/tt_2023_w30_scurvy.png\ntoc: true\ncategories: [R, TidyTuesday, datavis, scurvy]\n---\n\n\n# Introduction\n\n<br>\n\nThe [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) weekly challenge is organised by the R4DS (R for Data Science) Online Learning Community.\n\nEvery tuesday throughout the year, participants work on a common dataset and share the plots they create.\n\nThe [dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-07-25/readme.md) for this challenge comes from the [{medicaldata}](https://higgi13425.github.io/medicaldata/) R package.\n\n<br>\n\n# Getting the data\n\n<br>\n\nFirst of all, let's load the packages we'll be using :\n\n-   [{tidyverse}](https://www.tidyverse.org/) to clean the data and create the plots\n\n-   [{showtext}](https://github.com/yixuan/showtext) to change the fonts used\n\n-   [{patchwork}](https://patchwork.data-imaginist.com/) to assemble the plots\n\nIf you don't have these packages installed, simply use the `install.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the packages\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\n```\n:::\n\n\n<br>\n\nWe also load the fonts we will use in the plots: [**Roboto Condensed**](https://fonts.google.com/specimen/Roboto+Condensed)for the text and [**Bangers**](https://fonts.google.com/specimen/Bangers) for the title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the fonts\nfont_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\nfont_add_google(\"Bangers\", \"Bangers\")\nshowtext_auto()\n```\n:::\n\n\n<br>\n\nWe can now download the dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the dataset\nscurvy <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-07-25/scurvy.csv\")\n```\n:::\n\n\n<br>\n\nFor a quick overview of the data, we use the `glimpse()` function from the [{dplyr}](https://dplyr.tidyverse.org/) package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the dataset\nglimpse(scurvy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12\nColumns: 8\n$ study_id                  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n$ treatment                 <chr> \"cider\", \"cider\", \"dilute_sulfuric_acid\", \"d…\n$ dosing_regimen_for_scurvy <chr> \"1 quart per day\", \"1 quart per day\", \"25 dr…\n$ gum_rot_d6                <chr> \"2_moderate\", \"2_moderate\", \"1_mild\", \"2_mod…\n$ skin_sores_d6             <chr> \"2_moderate\", \"1_mild\", \"3_severe\", \"3_sever…\n$ weakness_of_the_knees_d6  <chr> \"2_moderate\", \"2_moderate\", \"3_severe\", \"3_s…\n$ lassitude_d6              <chr> \"2_moderate\", \"3_severe\", \"3_severe\", \"3_sev…\n$ fit_for_duty_d6           <chr> \"0_no\", \"0_no\", \"0_no\", \"0_no\", \"0_no\", \"0_n…\n```\n:::\n:::\n\n\nThe dataset has **12 observations** (rows) and **8 variables** (columns).\n\nEach row represents a **seaman with scurvy symptoms**.\n\n**Six treatments** were tested (citrus, cider, dilute sulfuric acid, purgative mixture, sea water and vinegar) and **four symptoms** evaluated (rotting of the gums, skin sores, weakness of the knees and lassitude).\n\n<br>\n\n# Cleaning the data\n\n<br>\n\nWe use the following code to clean the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscurvy_clean <- scurvy |>\n  # remove dosing regimen column\n  select(-dosing_regimen_for_scurvy) |>\n  # transform from wide to long format\n  pivot_longer(cols = gum_rot_d6:fit_for_duty_d6,\n               names_to = \"item\",\n               values_to = \"value\") |>\n  # separate \"value\" column into \"score\" + \"grade\"\n  separate(col = value,\n           into = c(\"score\", \"grade\"),\n           convert = TRUE) |>\n  # remove \"_d6\" suffix in item column\n  # replace \"_\" with white spaces\n  # transform character strings into sentences\n  mutate(item = str_remove_all(item, \"_d6\"),\n         across(treatment:item, ~str_replace_all(., pattern = \"_\", replacement = \" \")),\n         across(c(treatment, item, grade), ~str_to_sentence(.))) |>\n  # transform study_id into factor\n  # arrange factor levels by order of appearance\n  mutate(study_id = fct_inseq(as_factor(study_id)),\n         across(treatment:item, ~fct_inorder(.)))\n\n# View first lines of cleaned data\nhead(scurvy_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  study_id treatment item                  score grade   \n  <fct>    <fct>     <fct>                 <int> <chr>   \n1 1        Cider     Gum rot                   2 Moderate\n2 1        Cider     Skin sores                2 Moderate\n3 1        Cider     Weakness of the knees     2 Moderate\n4 1        Cider     Lassitude                 2 Moderate\n5 1        Cider     Fit for duty              0 No      \n6 2        Cider     Gum rot                   2 Moderate\n```\n:::\n:::\n\n\n<br>\n\nWe calculate an \"overall improvement score\" using the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverall_improvement <- scurvy_clean |>\n  # remove \"Fit for duty\" column\n  filter(item != \"Fit for duty\") |>\n  # calculate total score by treatment\n  summarise(total = sum(score),\n            .by = treatment) |>\n  # calculate overall improvement score as %\n  mutate(improvement_score = 100 * (24-total) / 24) |>\n  # arrange data by increasing improvement score\n  arrange(improvement_score)\n\n# View table\noverall_improvement\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  treatment            total improvement_score\n  <fct>                <int>             <dbl>\n1 Vinegar                 24               0  \n2 Sea water               24               0  \n3 Purgative mixture       24               0  \n4 Dilute sulfuric acid    21              12.5\n5 Cider                   16              33.3\n6 Citrus                   3              87.5\n```\n:::\n:::\n\n\n<br>\n\n# Creating the plots\n\n<br>\n\n## Text\n\n<br>\n\nFirst we create a table for the text to be displayed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create table with text and x/y positions for plot\np_text <- tibble(\n  x = 0,\n  y = c(6, 4:2, 0:-3, -5, -6),\n  text = c(\"In 1757, the cause of scurvy was unknown ...\",\n           \"Aboard HMS Salisbury, the ship's surgeon, James Lind,\",\n           \"tested 6 different treatments in 12 seamen with\",\n           \"symptomatic scurvy.\",\n           \"After six days of therapy, he noted the severity of several\",\n           \"symptoms, including rotting of the gums, skin sores,\",\n           \"weakness of the knees, and lassitude, using a scale ranging\",\n           \"from 0 (none) to 3 (severe).\",\n           \"The figure shows overall improvement of symptoms in the\",\n           \"treated seamen.\"\n           )\n  )\n```\n:::\n\n\nWe then create a first plot with the text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create p0 plot with text\np0 <- ggplot() +\n  geom_text(data = p_text,\n            aes(x = x, y = y, label = text),\n            family = \"Roboto Condensed\", colour = \"white\", hjust = 0, size = 18) +\n  xlim(0, 10) +\n  ylim(-10, 10) +\n  labs(title = \"Curing scurvy\") +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#003049\", color  = \"#003049\"),\n        plot.background = element_rect(fill = \"#003049\", color  = \"#003049\"),\n        plot.title = element_text(family = \"Bangers\", colour = \"white\",\n                                  size = 100, hjust = 0.5, margin = margin(t = 20)))\n```\n:::\n\n\n![](img/tt_2023_w30_scurvy_p0.png)\n\n<br>\n\n## Improvement scores\n\n<br>\n\nWe represent the overall improvement scores as percentages using coloured bars.\n\nFirst, we create data points to draw bars ranging from 0 to 100:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data points to draw bars from 0 to 100\np1_bars <- overall_improvement |>\n  # keep treatment column\n  select(treatment) |>\n  # add a row id column named \"y\"\n  rowid_to_column(var = \"y\") |>\n  # repeat each row 101 times (0 to 100)\n  slice(rep(1:n(), each = 101)) |>\n  # add a column with positions to draw bars (for each of the 6 treatments)\n  mutate(x = rep(0:100, times = 6))\n```\n:::\n\n\n<br>\n\nThen we create data points to represent the actual improvement scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data points to draw bars for improvement scores\np1_values <- overall_improvement |>\n  # round improvement score %\n  mutate(improvement_score = round(improvement_score)) |>\n  # select treatment + improvement score columns\n  select(treatment, improvement_score) |>\n  # join p1_bars to get positions for bars from 0 to score\n  left_join(p1_bars) |>\n  # extract max score for each treatment\n  mutate(max_score = max(improvement_score),\n         .by = treatment) |>\n  # remove rows when x > max_score\n  filter(x <= max_score) |>\n  # order columns\n  select(y, treatment, x)\n```\n:::\n\n\n<br>\n\nFinally, we create the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data points to draw bars for improvement scores\np1 <- ggplot() +\n  geom_segment(data = p1_bars,\n               aes(x = x, xend = x,\n                   y = y - 0.25, yend = y + 0.25,\n                   colour = x),\n               linewidth = 1, alpha = 0.4,\n               show.legend = FALSE) +\n  geom_segment(data = p1_values,\n               aes(x = x, xend = x,\n                   y = y - 0.25, yend = y + 0.25,\n                   colour = x),\n               linewidth = 1,\n               show.legend = FALSE) +\n  geom_text(data = p1_values |> distinct(y, treatment),\n            aes(x = 0, y = y + 0.4, label = treatment),\n            size = 15, colour = \"white\", hjust = 0,\n            family = \"Roboto Condensed\") +\n  scale_colour_gradient2(low = \"#d62828\", mid = \"#f77f00\", high = \"#fcbf49\",\n                         midpoint = 50) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#003049\", color  = \"#003049\"),\n        plot.background = element_rect(fill = \"#003049\", color  = \"#003049\"))\n```\n:::\n\n\n![](img/tt_2023_w30_scurvy_p1.png)\n\n<br>\n\n## Assembling the plots\n\n<br>\n\nWe use the {patchwork} package to assemble the two plots, add some caption text, and export to .png format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assemble the two plots\np <- p0 + p1 +\n  plot_annotation(\n    caption = \"#TidyTuesday 2023 week 30 | Data from {medicaldata} | Jonathan Kitt\",\n    theme = theme(\n      panel.background = element_rect(fill = \"#003049\", color  = \"#003049\"),\n      plot.background = element_rect(fill = \"#003049\", color  = \"#003049\"),\n      plot.caption = element_text(colour = \"white\", hjust = 0.5, size = 30,\n                                  family = \"Roboto Condensed\")\n      )\n    )\n\n# Export to png\nggsave(\"figs/tt_2023_w30_scurvy.png\", p, dpi = 320, width = 12, height = 6)\n```\n:::\n\n\n<br>\n\nAnd here's the result!\n\n![](img/tt_2023_w30_scurvy.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}